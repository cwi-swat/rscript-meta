#ifndef __RSCRIPT_LISTENERS__
#define __RSCRIPT_LISTENERS__

#include <meta-namespace.h>
#include <module-manager.tb>
#include <rscript-namespace.h>
#include <graph-namespace.h>
#include <navigator.idef>

#include <rscriptchecker.idef>

#define BG_ERROR_COLOR rgb(224,64,60)
#define BG_CHILD_ERROR_COLOR rgb(255,128,114)
#define BG_CORRECT_COLOR rgb(255,255,221)
#define BG_GRAYED_OUT rgb (211,211,211)

#define MODULE_OPENED set(RSCRIPT_NAMESPACE, "status", opened)
#define MODULE_ERROR set(RSCRIPT_NAMESPACE, "status", error)
#define MODULE_UNAVAILABLE set(RSCRIPT_NAMESPACE, "status", unavailable)
#define MODULE_IDLE or(MODULE_OPENED,or(MODULE_UNAVAILABLE,MODULE_ERROR))
#define ALL_MODULES_IDLE and(MODULE_IDLE, all(MODULE_IDLE))

process InitializeInheritedStatus is
  /* the first one must not have any <term> holes because of a ToolBus bug */
  
  /* Once we are opened and our kids are opened, then we become complete */
  MM-RegisterAttributeUpdateRule(RSCRIPT_NAMESPACE, "status", and(set(RSCRIPT_NAMESPACE, "status", opened),all(set(RSCRIPT_NAMESPACE, "status", opened))), complete)

  /* When we are not in error and one of our kids has an error, we become child-error */
  . MM-RegisterAttributeUpdateRule(RSCRIPT_NAMESPACE, "status", and(not(set(RSCRIPT_NAMESPACE, "status", error)), one(set(RSCRIPT_NAMESPACE, "status", error))), child-error)

  . MM-RegisterAttributeUpdateRule(META_NAMESPACE, "idle", ALL_MODULES_IDLE, yes)

   /*Error -> Background color  */
  /*. MM-RegisterAttributeUpdateRule(GRAPH_NAMESPACE, "bgcolor", set(RSCRIPT_NAMESPACE, "status", error), fill-color(BG_ERROR_COLOR))*/

  /* Child-error -> Background color */ 
  /*. MM-RegisterAttributeUpdateRule(GRAPH_NAMESPACE, "bgcolor", and(not(set(RSCRIPT_NAMESPACE, "status", error)), one(set(RSCRIPT_NAMESPACE, "status", error))), fill-color(BG_CHILD_ERROR_COLOR))*/

toolbus(InitializeInheritedStatus)

process RSCRIPTModuleLabelSetter is
let
  Event: attribute-changed-event,
  Extension: str,
  File: file,
  ModuleId: module-id,
  Modulename: str,
  Name: str,
  Prefix: str
in
  MM-Subscribe-Attribute-Changed(<module-id>,RSCRIPT_NAMESPACE,"name",<term>,<term>)
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . ACE-GetNewValue(Event, Modulename?)
    . SplitFilename(Modulename, Name?, Prefix?, Extension?)
    . MM-SetModuleGraphAttribute(ModuleId, "label", label(Name))
    . snd-msg(io-make-file(Modulename))
    . rec-msg(io-file(Modulename, File?))
    . MM-SetModuleGraphAttribute(ModuleId, "file", file(File))
  )
  *
  delta
endlet

toolbus(RSCRIPTModuleLabelSetter)

process RSCRIPTModuleTooltipSetter is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  Modulename: str
in
  MM-Subscribe-Attribute-Changed(<module-id>,RSCRIPT_NAMESPACE,"name",<term>,<term>)
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . ACE-GetNewValue(Event, Modulename?)
    . MM-SetModuleGraphAttribute(ModuleId, "tooltip", tooltip(Modulename))
  )
  *
  delta
endlet

toolbus(RSCRIPTModuleTooltipSetter)

process RSCRIPTModuleColorChanger is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  NewPath: term,
  Tree: term,
  Value: term
in
  MM-Subscribe-Attribute-Changed(<module-id>,RSCRIPT_NAMESPACE,"status",<term>,error)
  . MM-Subscribe-Attribute-Changed(<module-id>,RSCRIPT_NAMESPACE,"status",<term>,child-error)  
  . MM-Subscribe-Attribute-Changed(<module-id>,RSCRIPT_NAMESPACE,"status",error,<term>)  
  . MM-Subscribe-Attribute-Changed(<module-id>,RSCRIPT_NAMESPACE,"status",child-error,<term>)  
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . ACE-GetNewValue(Event, Value?)
    .
    if equal(Value, error) then
      MM-SetModuleGraphAttribute(ModuleId, "bgcolor", fill-color(BG_ERROR_COLOR))
    else
      if equal(Value,child-error) then
        MM-SetModuleGraphAttribute(ModuleId, "bgcolor", fill-color(BG_CHILD_ERROR_COLOR))
      else
        MM-SetModuleGraphAttribute(ModuleId, "bgcolor", fill-color(BG_CORRECT_COLOR))
      fi
    fi
  )
  *
  delta
endlet

toolbus(RSCRIPTModuleColorChanger)

process RSCRIPTModuleVisualizeEditable is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  NewPath: term,
  Tree: term,
  Value: term
in
  MM-Subscribe-Attribute-Changed(<module-id>,RSCRIPT_NAMESPACE,"editable",<term>,true)  
  . MM-Subscribe-Attribute-Changed(<module-id>,RSCRIPT_NAMESPACE,"editable",<term>,false)  
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . ACE-GetNewValue(Event, Value?)
    .
    if equal(Value, quote(false)) then
      MM-SetModuleGraphAttribute(ModuleId, "bgcolor", fill-color(BG_GRAYED_OUT))
    else
      MM-SetModuleGraphAttribute(ModuleId, "bgcolor", fill-color(BG_CORRECT_COLOR))
    fi
  )
  *
  delta
endlet

toolbus(RSCRIPTModuleVisualizeEditable)

process RSCRIPTModuleParser is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  Tree: term
in
  MM-Subscribe-Attribute-Changed(<module-id>,RSCRIPT_NAMESPACE,"status",<term>,available)
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . GetRSCRIPTParsetree(ModuleId, Tree?)
    .
    if equal(Tree, UNDEFINED) then
       printf("RSCRIPTMODULEPARSER - No tree\n").
       MM-SetAttribute(ModuleId, RSCRIPT_NAMESPACE, "status", error)
    else
       printf("RSCRIPTMODULEPARSER - Parsed\n").
       MM-SetAttribute(ModuleId, RSCRIPT_NAMESPACE, "status", parsed)
    fi
    . Tree := UNDEFINED
  )
  *
  delta
endlet

toolbus(RSCRIPTModuleParser)

process RSCRIPTModuleIdentifier is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  Tree: term,
  Result: term
in
  MM-Subscribe-Attribute-Changed(<module-id>,RSCRIPT_NAMESPACE,"status",<term>,parsed)
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . RSCRIPTIdentifyModule(ModuleId, Result?)
    . MM-SetAttribute(ModuleId, RSCRIPT_NAMESPACE, "status", Result)
  )
  *
  delta
endlet

toolbus(RSCRIPTModuleIdentifier)

process RSCRIPTChecker is
let
  Event: attribute-changed-event,
  Summary: summary,
  Tree: term,
  ModuleId: module-id
in
  MM-Subscribe-Attribute-Changed(<module-id>,RSCRIPT_NAMESPACE,"status",<term>,parsed)
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . CheckRSCRIPTModule(ModuleId)
  )
  *
  delta
endlet

toolbus(RSCRIPTChecker)

process RSCRIPTSetModuleImports is
let
  Event: attribute-changed-event,
  Import: str,
  ImportId: module-id,
  Imports: list,
  ModuleId: module-id,
  Tree: term
in
  MM-Subscribe-Attribute-Changed(<module-id>,RSCRIPT_NAMESPACE,"status",<term>,identified)
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . MM-SetAttribute(ModuleId, RSCRIPT_NAMESPACE, "status", opening)
    . GetRSCRIPTParsetree(ModuleId, Tree?)
    . MM-GetModuleDependencies(ModuleId, Imports?)
    .
    if not-equal(Imports, []) then
      MM-DeleteModuleDependencies(ModuleId)
    else
      tau
    fi
    . GetImportedModulenames(Tree, Imports?)
    .
    if not-equal(Imports, []) then
      if not-equal(Imports, []) then
        Import := first(Imports)
        . Imports := next(Imports)
        . OpenModule(Import, ImportId?)
        . MM-AddModuleDependency(ModuleId, ImportId)
      fi
      *
      if equal(Imports, []) then
        MM-SetAttribute(ModuleId, RSCRIPT_NAMESPACE, "status", opened)
      fi
    else
      MM-SetAttribute(ModuleId, RSCRIPT_NAMESPACE, "status", opened)
    fi
  )
  *
  delta
endlet

toolbus(RSCRIPTSetModuleImports)

process RSCRIPTRemoveDependencies is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  Value: term
in
  MM-Subscribe-Attribute-Changed(<module-id>,RSCRIPT_NAMESPACE,"status",<term>,unknown)
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetOldValue(Event, Value?)
    .
    if not-equal(Value, undefined) then
      ACE-GetModuleId(Event, ModuleId?)
      . MM-DeleteModuleDependencies(ModuleId)
    else
      tau
    fi
  )
  *
  delta
endlet

toolbus(RSCRIPTRemoveDependencies)

#endif /* __RSCRIPT_LISTENERS__ */
