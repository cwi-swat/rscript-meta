#ifndef __RSCRIPT_ACTIONS__
#define __RSCRIPT_ACTIONS__

#include <config-utils.tb>
#include <rscript-namespace.h>
#include <gui-utils.tb>
#include <pretty-print-utils.tb>
#include <rscriptcalculator.idef>

process ChangeWorkspaceAction is
let
  Cancel: bool,
  Path: str
in
  PromptForDirectory("Workspace", [], Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    snd-msg(cm-change-workspace(Path))
  fi
endlet

process CloseAllAction is
let
  Id: term,
  ModuleId: module-id,
  Modules: list
in
  Id := process-id
  . MM-GetAllModules(Modules?)
  . CloseModules(Modules)
endlet

process NewModuleAction is
let
  Cancel: bool,
  Extension : str,
  Directory : str,
  Pid: int,
  FileName : str,
  Path : str,
  Paths: list
in
  GetSearchPaths(Paths?)
  . PromptForFileWithExtension("New Module", Paths, RSCRIPT_EXTENSION, Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    SplitFilename(Path, FileName?, Directory?, Extension?)
    . create(NewModuleContentHandler(), Pid?)
    . CreateNewModule(Pid, Directory, FileName)
  fi
endlet

process DefaultPrettyPrintAction(EditorId : session-id) is
let
  Tree : term,
  RTree : term,
  ModuleId: module-id,
  Path: str
in
  GetModuleId(EditorId, ModuleId?)
  . GetRSCRIPTParsetree(ModuleId, Tree?)
  .
  if not-equal(Tree, UNDEFINED) then
    PrettyPrint(Path, Tree, RTree?)
    . 
    if not-equal(RTree, UNDEFINED) then
      ReplaceFocus(EditorId, RTree)
    else 
      tau
    fi
  else tau
  fi
endlet

process OpenModuleAction is
let
  Cancel: bool,
  Event: attribute-changed-event,
  Extension : str,
  Directory : str,
  Path : str,
  Idle: term,
  Filename : str,
  RelativeFilename : str,
  ModuleId : module-id,
  Paths: list,
  FoundPath: str,
  Prefix: str,
  HasAttribute: bool
in
  GetSearchPaths(Paths?)
  . PromptForFileWithExtension("Open Module", Paths, RSCRIPT_EXTENSION, Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    if equal(Path, "") then
      tau
    else
      SplitFilename(Path, Filename?, Directory?, Extension?)
      . snd-msg(io-get-relative-filename(Paths, Path, Extension))
      . rec-msg(io-filename(Paths, Path, Extension, Prefix?, RelativeFilename?))
      . BuildPath(Prefix, RelativeFilename, Extension, FoundPath?)
      .
      if equal(FoundPath, Path) then
	snd-msg(tm-request-transaction(module-manager))
        . OpenModule(RelativeFilename, ModuleId?)
	. MM-Subscribe-Attribute-Changed(ModuleId,META_NAMESPACE,"idle",<term>,yes)
	. MM-HasAttribute(ModuleId, META_NAMESPACE, "idle", HasAttribute?) 
	.
	if equal(HasAttribute, true) then
	  MM-GetAttribute(ModuleId, META_NAMESPACE, "idle", Idle?)
	else
	  tau
	fi
        .
	if or(not-equal(Idle, yes), equal(HasAttribute, false)) then
          rec-note(mm-attribute-changed(Event?))
	else
	  tau
	fi
	. snd-msg(tm-end-transaction(module-manager))
        . SelectModule(ModuleId)
      else
        printf("warning: The chosen Module is shadowed by another module in the search path: %s\n", FoundPath)
      fi
    fi
  fi
endlet


process DumpParseTableAction(ModuleId : module-id) is
let
  Cancel: bool,
  Path : str
in
  PromptForFileWithExtension("Export Term ParseTable", [], ".trm.tbl", Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    DumpParseTable(ModuleId, Path, trm)
  fi
endlet

process EditorDumpParseTableAction(EditorId : session-id) is
let
  Cancel: bool,
  Path : str,
  ModuleId : module-id
in
  GetModuleId(EditorId, ModuleId?)
  . PromptForFileWithExtension("Export Term ParseTable", [], ".trm.tbl", Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    DumpParseTable(ModuleId, Path, trm)
  fi
endlet

process DumpRScriptDefinitionAction(ModuleId : module-id) is
let
  Cancel: bool,
  Path : str
in
  PromptForFileWithExtension("Export RSCRIPT Definition", [], ".def", Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    snd-msg(tm-request-transaction(syntax-definition))
    . DumpRScriptDefinition(ModuleId, Path)
    . snd-msg(tm-end-transaction(syntax-definition))
  fi
endlet

process CloseModuleAction(ModuleId : module-id) is
let
  Answer     : term,
  Recursive  : bool
in
  AskQuestion("Do you want to recursively close the imported modules?", Answer?)
  . 
  if equal(Answer, cancel) then
    tau
  else
    if equal(Answer, yes) then
      Recursive := true
    else
      Recursive := false
    fi 
    . CloseModule(ModuleId, Recursive)
  fi
endlet

process CloseOtherModulesAction(ModuleId : module-id) is
  CloseOtherModules(ModuleId) 

process ExtractRSCRIPTAction(ModuleId : module-id) is
let
  Syntax : term,
  Store : term,
  RStore : rstore,
  Modulename : str
in
  GetSyntaxDefinition(ModuleId, Syntax?)
  . MM-GetAttribute(ModuleId, RSCRIPT_NAMESPACE, "name", Modulename?)
  . snd-msg(es-extract-rscript(Syntax))
  . rec-msg(es-rscript-store(Store?))
  . snd-msg(rs-lower-rstore(Store))
  . rec-msg(rs-lowered-rstore(RStore?))
  . snd-msg(rc-load-rstore(Modulename, RStore))
endlet

process RunRScriptAction(ModuleId : module-id) is
  RunRScript(ModuleId)

process RunRScriptWithRStoreAction(ModuleId : module-id) is
  RunRScriptWithRStore(ModuleId)

#endif /*__RSCRIPT_ACTIONS__*/
